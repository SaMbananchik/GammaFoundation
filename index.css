<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gamma Foundation - База данных аномальных объектов и документов</title>
    <meta name="description" content="Официальная база данных Gamma Foundation. Исследование, содержание и защита аномальных объектов. Секретные документы, классификация аномалий.">
    <meta name="keywords" content="Gamma Foundation, аномальные объекты, секретные документы, база данных, классификация объектов, SCP, аномалии">
    <meta name="author" content="Gamma Foundation">
    <meta name="robots" content="index, follow">
    <link rel="canonical" href="https://gamma-foundation.org">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Courier New', monospace;
            background: #d3d3d3; /* Светло-серый фон */
            color: #00ffcc;
            line-height: 1.6;
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px; /* Увеличил ширину контейнера */
            margin: 0 auto;
            padding: 30px; /* Увеличил отступы */
            display: grid;
            grid-template-columns: 300px 1fr; /* Увеличил ширину левой панели */
            gap: 30px; /* Увеличил расстояние между колонками */
        }
        
        /* Header */
        .header {
            background: linear-gradient(135deg, #002244 0%, #003366 100%);
            border-bottom: 3px solid #00ffcc;
            padding: 25px 0; /* Увеличил отступы */
            text-align: center;
            grid-column: 1 / -1;
            position: relative;
            border-radius: 10px; /* Добавил скругление углов */
            margin-bottom: 20px; /* Добавил отступ снизу */
        }
        
        .header h1 {
            font-size: 3em; /* Увеличил размер заголовка */
            text-shadow: 0 0 10px #00ffcc;
            letter-spacing: 3px;
        }
        
        .header .subtitle {
            color: #00cc99;
            font-style: italic;
            margin-top: 15px; /* Увеличил отступ */
            font-size: 1.2em; /* Увеличил размер подзаголовка */
        }
        
        /* Top Navigation - Кнопки справа сверху */
        .top-nav {
            position: absolute;
            top: 25px; /* Увеличил отступ сверху */
            right: 25px; /* Увеличил отступ справа */
            display: flex;
            gap: 15px; /* Увеличил расстояние между кнопками */
        }
        
        /* Left Navigation - Основное меню СЛЕВА */
        .left-nav {
            background: #002244;
            padding: 25px; /* Увеличил отступы */
            border-radius: 15px; /* Увеличил скругление углов */
            border: 2px solid #00ffcc;
            height: fit-content;
        }
        
        .left-nav-buttons {
            display: flex;
            flex-direction: column;
            gap: 20px; /* Увеличил расстояние между кнопками */
        }
        
        /* Main Content */
        .main-content {
            background: #002233;
            border-radius: 15px; /* Увеличил скругление углов */
            padding: 35px; /* Увеличил отступы */
            border: 2px solid #00ffcc;
            min-height: 600px; /* Увеличил минимальную высоту */
        }
        
        /* Auth */
        .auth-container {
            background: #002b4d;
            padding: 20px; /* Увеличил отступы */
            border-radius: 10px; /* Увеличил скругление углов */
            margin: 25px 0; /* Увеличил отступы */
            border: 1px solid #00ffcc;
            text-align: center;
        }
        
        .auth-info {
            margin-bottom: 20px; /* Увеличил отступ снизу */
            font-weight: bold;
            font-size: 1.1em; /* Увеличил размер текста */
        }
        
        /* Buttons */
        button {
            background: linear-gradient(135deg, #006699 0%, #0099cc 100%);
            color: white;
            border: none;
            padding: 15px 25px; /* Увеличил отступы внутри кнопок */
            border-radius: 8px; /* Увеличил скругление углов */
            cursor: pointer;
            font-family: 'Courier New', monospace;
            font-weight: bold;
            transition: all 0.3s ease;
            border: 1px solid #00ffcc;
            width: 100%;
            text-align: left;
            font-size: 1.1em; /* Увеличил размер текста */
        }
        
        button:hover {
            background: linear-gradient(135deg, #0099cc 0%, #00ccff 100%);
            transform: translateX(5px);
            box-shadow: 0 0 15px #00ffcc;
        }
        
        button:disabled {
            background: #333;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #990000 0%, #cc0000 100%);
        }
        
        .btn-danger:hover {
            background: linear-gradient(135deg, #cc0000 0%, #ff3333 100%);
        }
        
        .btn-edit {
            background: linear-gradient(135deg, #006600 0%, #009900 100%);
        }
        
        .btn-edit:hover {
            background: linear-gradient(135deg, #009900 0%, #00cc00 100%);
        }
        
        /* Forms */
        input, textarea, select {
            width: 100%;
            padding: 15px; /* Увеличил отступы */
            margin: 15px 0; /* Увеличил отступы */
            background: #003366;
            border: 1px solid #00ffcc;
            border-radius: 8px; /* Увеличил скругление углов */
            color: #00ffcc;
            font-family: 'Courier New', monospace;
            font-size: 1.1em; /* Увеличил размер текста */
        }
        
        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: #00ccff;
            box-shadow: 0 0 10px #00ccff;
        }
        
        /* Article list */
        .article-list {
            list-style: none;
            margin: 25px 0; /* Увеличил отступы */
        }
        
        .article-item {
            background: #003366;
            padding: 25px; /* Увеличил отступы */
            margin: 20px 0; /* Увеличил отступы */
            border-radius: 10px; /* Увеличил скругление углов */
            border: 1px solid #00ffcc;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }
        
        .article-item:hover {
            transform: translateX(5px);
            box-shadow: 0 0 15px #00ffcc;
        }
        
        .article-badge {
            position: absolute;
            top: 15px; /* Увеличил отступ сверху */
            right: 15px; /* Увеличил отступ справа */
            padding: 8px 15px; /* Увеличил отступы */
            border-radius: 6px; /* Увеличил скругление углов */
            font-size: 1em; /* Увеличил размер текста */
            font-weight: bold;
        }
        
        .badge-object {
            background: #0066cc;
            color: white;
        }
        
        .badge-document {
            background: #00cc99;
            color: black;
        }
        
        .article-author {
            font-size: 1em; /* Увеличил размер текста */
            color: #00cc99;
            margin-top: 15px; /* Увеличил отступ сверху */
        }
        
        /* Views */
        .view {
            display: none;
        }
        
        .view.active {
            display: block;
        }
        
        /* Status messages */
        .status-message {
            padding: 20px; /* Увеличил отступы */
            margin: 20px 0; /* Увеличил отступы */
            border-radius: 8px; /* Увеличил скругление углов */
            text-align: center;
            font-weight: bold;
            font-size: 1.2em; /* Увеличил размер текста */
        }
        
        .status-success {
            background: #003300;
            color: #00ff00;
            border: 1px solid #00ff00;
        }
        
        .status-error {
            background: #330000;
            color: #ff0000;
            border: 1px solid #ff0000;
        }
        
        /* Footer */
        .footer {
            text-align: center;
            margin-top: 50px; /* Увеличил отступ сверху */
            padding: 25px; /* Увеличил отступы */
            color: #00cc99;
            border-top: 1px solid #00ffcc;
            grid-column: 1 / -1;
            font-size: 1.1em; /* Увеличил размер текста */
        }
        
        /* Responsive */
        @media (max-width: 900px) { /* Увеличил точку перехода для мобильных устройств */
            .container {
                grid-template-columns: 1fr;
                padding: 20px; /* Увеличил отступы */
            }
            
            .top-nav {
                position: static;
                justify-content: center;
                margin: 15px 0; /* Увеличил отступы */
            }
            
            .left-nav {
                order: 2;
            }
            
            .main-content {
                order: 1;
            }
            
            button {
                width: 100%;
                text-align: center;
            }
        }
        
        /* SEO Content - видно только поисковикам */
        .seo-content {
            position: absolute;
            left: -9999px;
            height: 1px;
            overflow: hidden;
        }
    </style>
</head>
<body>
    <!-- SEO контент для поисковиков -->
    <div class="seo-content">
        <h1>Gamma Foundation - База данных аномальных объектов</h1>
        <h2>Официальный архив Gamma Foundation</h2>
        <p>Gamma Foundation - международная организации, занимающаяся исследованием, содержанием и защитой аномальных объектов и явлений.</p>
    </div>

    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>GAMMA FOUNDATION</h1>
            <div class="subtitle">Исследуем. Содержим. Защищаем.</div>
            
            <!-- Кнопки справа сверху -->
            <div class="top-nav">
                <button onclick="showView('login')">Войти</button>
                <button onclick="showView('register')" id="registerBtn">Регистрация</button>
                <button onclick="logout()" id="logoutBtn" style="display:none;">Выйти</button>
            </div>
        </div>

        <!-- Основное меню СЛЕВА -->
        <div class="left-nav">
            <div class="left-nav-buttons">
                <button onclick="showView('home')">🏠 Главная</button>
                <button onclick="showView('catalog')">📁 Каталог</button>
                <button onclick="showView('create')" id="createBtn" disabled>📝 Создать</button>
                <button onclick="showView('invites')" id="invitesBtn" style="display:none;">📨 Приглашения</button>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Login View -->
            <div class="view" id="loginView">
                <h2>🔐 Авторизация</h2>
                <form id="loginForm">
                    <input type="text" id="username" placeholder="Ваш никнейм" required>
                    <input type="password" id="password" placeholder="Ваш пароль" required>
                    <button type="submit">Войти в систему</button>
                </form>
            </div>

            <!-- Register View -->
            <div class="view" id="registerView">
                <h2>📝 Регистрация</h2>
                <form id="registerForm">
                    <input type="text" id="regUsername" placeholder="Придумайте никнейм" required>
                    <input type="password" id="regPassword" placeholder="Придумайте пароль" required>
                    <button type="submit">Создать аккаунт</button>
                </form>
            </div>

            <!-- Home View -->
            <div class="view active" id="homeView">
                <h2>Добро пожаловать в Gamma Foundation</h2>
                
                <div class="auth-container">
                    <div class="auth-info" id="authInfo">Статус: Не авторизован</div>
                </div>
                
                <div class="about-section">
                    <h3>О нашей организации</h3>
                    <p>Gamma Foundation - международная организация, специализирующаяся на исследовании и содержании аномальных объектов. Наша миссия - защита человечества от неизвестных угроз.</p>
                </div>

                <div class="stats">
                    <h3>📊 Статистика системы</h3>
                    <p>Документов в базе: <strong id="articleCount">0</strong></p>
                    <p>Зарегистрировано пользователей: <strong id="userCount">0</strong></p>
                </div>

                <div class="quick-access">
                    <h3>⚡ Быстрый доступ</h3>
                    <p>• Для просмотра документов перейдите в "Каталог"</p>
                    <p>• Для создания новых записей требуется авторизация</p>
                </div>
            </div>

            <!-- Catalog View -->
            <div class="view" id="catalogView">
                <h2>📁 Каталог документов</h2>
                <p>Общее количество документов: <strong id="totalArticles">0</strong></p>
                <ul class="article-list" id="articleList">
                    <li class="article-item">Загрузка документов...</li>
                </ul>
            </div>

            <!-- Create View -->
            <div class="view" id="createView">
                <h2>📝 Создать новый документ</h2>
                <form id="createArticleForm">
                    <select id="articleType" onchange="toggleFields()">
                        <option value="object">Объект</option>
                        <option value="document">Документ</option>
                    </select>
                    
                    <div id="numberField" style="display:none;">
                        <input type="text" id="articleNumber" placeholder="Номер объекта (например, GF-173)">
                    </div>
                    
                    <input type="text" id="articleTitle" placeholder="Название документа" required>
                    
                    <div id="objectFields" style="display:none;">
                        <select id="articleClass">
                            <option value="Alpha">Alpha - Безопасный</option>
                            <option value="Beta">Beta - Условно-безопасный</option>
                            <option value="Gamma">Gamma - Опасный</option>
                            <option value="Delta">Delta - Критическая угроза</option>
                        </select>
                        <textarea id="articleProcedures" placeholder="Особые условия содержания" rows="3"></textarea>
                    </div>
                    
                    <textarea id="articleDescription" placeholder="Подробное описание..." rows="6" required></textarea>
                    <button type="submit">💾 Сохранить документ</button>
                </form>
            </div>

            <!-- Read View -->
            <div class="view" id="readView">
                <button onclick="showView('catalog')">← Назад к каталогу</button>
                <div id="articleContent"></div>
                <div id="adminControls" style="display:none; margin-top:20px;">
                    <h3>⚙️ Административные функции</h3>
                    <button onclick="editCurrentArticle()" class="btn-edit" id="editArticleBtn">✏️ Редактировать</button>
                    <button onclick="deleteCurrentArticle()" class="btn-danger" id="deleteArticleBtn">🗑️ Удалить</button>
                </div>
            </div>

            <!-- Invites View -->
            <div class="view" id="invitesView">
                <h2>📨 Система приглашений</h2>
                <div class="invite-section">
                    <h3>Создать новое приглашение</h3>
                    <button onclick="generateInvite()">🎫 Сгенерировать приглашение</button>
                    <div id="inviteResult" style="display:none; margin-top:20px; padding:15px; background:#003366; border-radius:8px; border:1px solid #00ffcc;">
                        <h4>✅ Приглашение создано</h4>
                        <p><strong>Ссылка для приглашения:</strong></p>
                        <div style="background:#002b4d; padding:10px; border-radius:5px; margin:10px 0;">
                            <span id="inviteUrl" style="word-break:break-all;"></span>
                        </div>
                        <p><strong>Код приглашения:</strong></p>
                        <div style="background:#002b4d; padding:10px; border-radius:5px; margin:10px 0;">
                            <span id="inviteCodeDisplay" style="font-weight:bold;"></span>
                        </div>
                        <div style="display:flex; gap:10px; margin-top:15px;">
                            <button onclick="copyInviteUrl()">📋 Копировать ссылку</button>
                            <button onclick="copyInviteCode()">📋 Копировать код</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer -->
        <div class="footer">
            <p>Gamma Foundation Database v3.0 | Secure Access System</p>
            <p>© 2024 Gamma Foundation. Все права защищены.</p>
        </div>
    </div>

    <script>
        // Константы
        const ADMIN_PASSWORD = "Qq2720";
        const SUPER_ADMIN_PASSWORD = "9090qqxxjj";

        // Хранилище данных
        let articles = JSON.parse(localStorage.getItem('gammaArticles')) || [];
        let users = JSON.parse(localStorage.getItem('gammaUsers')) || [];
        let invites = JSON.parse(localStorage.getItem('gammaInvites')) || [];
        
        let isAuthenticated = false;
        let currentUser = null;
        let userAccessLevel = 0;
        let currentArticleId = null;

        // Инициализация
        function init() {
            // Создаем администратора по умолчанию если нет пользователей
            if (users.length === 0) {
                users.push({
                    username: 'admin',
                    password: ADMIN_PASSWORD,
                    accessLevel: 2,
                    registered: new Date().toISOString()
                });
                localStorage.setItem('gammaUsers', JSON.stringify(users));
            }
            
            // Создаем демо-статьи если их нет
            if (articles.length === 0) {
                createDemoArticles();
            }
            
            checkAuth();
            loadArticleList();
            updateStats();
            setupEventListeners();
            showView('home');
        }

        // Создание демо-статей
        function createDemoArticles() {
            articles = [
                {
                    id: 1,
                    type: 'object',
                    number: 'GF-173',
                    title: 'Статуя-охранник',
                    class: 'Beta',
                    procedures: 'Объект должен содержаться в камере 5x5 метров. При входе в камеру необходимо поддерживать визуальный контакт с объектом.',
                    description: 'Объект GF-173 представляет собой статую высотой 1.8 метра, напоминающую человеческую фигуру. При прерывании визуального контакта объект проявляет крайнюю агрессию и способен передвигаться со скоростью до 50 км/ч.',
                    author: 'admin',
                    date: new Date().toISOString()
                },
                {
                    id: 2,
                    type: 'document',
                    number: '',
                    title: 'Протокол безопасности уровня Gamma',
                    class: '',
                    procedures: '',
                    description: 'Данный документ описывает стандартные процедуры безопасности для объектов класса Gamma. Все сотрудники обязаны ознакомиться с содержанием перед работой с аномальными объектами.',
                    author: 'admin',
                    date: new Date().toISOString()
                }
            ];
            localStorage.setItem('gammaArticles', JSON.stringify(articles));
        }

        // Проверка авторизации
        function checkAuth() {
            const savedAuth = localStorage.getItem('gammaAuth');
            if (savedAuth) {
                const authData = JSON.parse(savedAuth);
                if (Date.now() - authData.loginTime < 86400000) {
                    isAuthenticated = true;
                    currentUser = authData.username;
                    userAccessLevel = authData.accessLevel;
                }
            }
            updateUI();
        }

        // Обновление интерфейса
        function updateUI() {
            document.getElementById('authInfo').textContent = isAuthenticated ? 
                `Пользователь: ${currentUser} | Уровень доступа: ${userAccessLevel}` : 
                'Статус: Не авторизован';
            
            document.getElementById('logoutBtn').style.display = isAuthenticated ? 'block' : 'none';
            document.getElementById('registerBtn').style.display = isAuthenticated ? 'none' : 'block';
            document.getElementById('createBtn').disabled = !isAuthenticated;
            document.getElementById('invitesBtn').style.display = (userAccessLevel >= 2) ? 'block' : 'none';
            
            updateStats();
        }

        // Обновление статистики
        function updateStats() {
            document.getElementById('articleCount').textContent = articles.length;
            document.getElementById('userCount').textContent = users.length;
            document.getElementById('totalArticles').textContent = articles.length;
        }

        // Показать/скрыть view
        function showView(viewName) {
            document.querySelectorAll('.view').forEach(view => {
                view.classList.remove('active');
            });
            document.getElementById(viewName + 'View').classList.add('active');
            
            if (viewName === 'catalog') loadArticleList();
            if (viewName === 'home') updateStats();
        }

        // Выход
        function logout() {
            isAuthenticated = false;
            currentUser = null;
            userAccessLevel = 0;
            localStorage.removeItem('gammaAuth');
            updateUI();
            showView('home');
            showStatus('Сессия завершена', 'success');
        }

        // Загрузка списка статей (теперь доступна всем)
        function loadArticleList() {
            const list = document.getElementById('articleList');
            
            if (articles.length === 0) {
                list.innerHTML = '<li class="article-item">В базе данных пока нет документов</li>';
                return;
            }
            
            list.innerHTML = '';
            articles.forEach(article => {
                const item = document.createElement('li');
                item.className = 'article-item';
                item.onclick = () => readArticle(article.id);
                
                const badge = document.createElement('span');
                badge.className = `article-badge ${article.type === 'object' ? 'badge-object' : 'badge-document'}`;
                badge.textContent = article.type === 'object' ? 'Объект' : 'Документ';
                
                const title = document.createElement('div');
                title.style.fontWeight = 'bold';
                title.style.fontSize = '1.2em';
                title.style.marginBottom = '15px';
                title.textContent = article.type === 'object' ? `${article.number} - ${article.title}` : article.title;
                
                const preview = document.createElement('div');
                preview.style.color = '#00cc99';
                preview.style.marginBottom = '15px';
                preview.textContent = article.description.substring(0, 150) + (article.description.length > 150 ? '...' : '');
                
                const author = document.createElement('div');
                author.className = 'article-author';
                author.textContent = `Автор: ${article.author} | ${new Date(article.date).toLocaleDateString()}`;
                
                if (article.type === 'object') {
                    const classInfo = document.createElement('div');
                    classInfo.style.color = '#ff9966';
                    classInfo.style.marginBottom = '10px';
                    classInfo.textContent = `Класс: ${article.class}`;
                    item.appendChild(classInfo);
                }
                
                item.appendChild(badge);
                item.appendChild(title);
                item.appendChild(preview);
                item.appendChild(author);
                list.appendChild(item);
            });
        }

        // Чтение статьи (теперь доступно всем)
        function readArticle(articleId) {
            const article = articles.find(a => a.id === articleId);
            if (!article) return;
            
            currentArticleId = articleId;
            const content = document.getElementById('articleContent');
            
            let html = `
                <h2>${article.type === 'object' ? article.number + ' - ' : ''}${article.title}</h2>
                <div style="background:#003366; padding:20px; border-radius:10px; margin:20px 0; border:1px solid #00ffcc;">
                    <p><strong>Тип:</strong> ${article.type === 'object' ? 'Объект' : 'Документ'}</p>
                    <p><strong>Автор:</strong> ${article.author}</p>
                    <p><strong>Создан:</strong> ${new Date(article.date).toLocaleString()}</p>
            `;
            
            if (article.type === 'object') {
                html += `<p><strong>Класс объекта:</strong> <span style="color:#ff9966; font-weight:bold;">${article.class}</span></p>`;
            }
            
            html += `</div>`;
            
            if (article.type === 'object' && article.procedures) {
                html += `
                    <h3>🔒 Условия содержания</h3>
                    <div style="background:#003366; padding:20px; border-radius:10px; margin:20px 0; border:1px solid #00ffcc;">
                        <p>${article.procedures}</p>
                    </div>
                `;
            }
            
            html += `
                <h3>📋 ${article.type === 'object' ? 'Описание объекта' : 'Содержание документа'}</h3>
                <div style="background:#003366; padding:25px; border-radius:10px; border:1px solid #00ffcc; line-height:1.8;">
                    <p>${article.description}</p>
                </div>
            `;
            
            content.innerHTML = html;
            
            // Показываем кнопки администрирования только авторизованным пользователям
            const adminControls = document.getElementById('adminControls');
            const editBtn = document.getElementById('editArticleBtn');
            const deleteBtn = document.getElementById('deleteArticleBtn');
            
            if (isAuthenticated) {
                if (userAccessLevel >= 5) {
                    // Суперадмин (уровень 5) - может редактировать и удалять любые статьи
                    adminControls.style.display = 'block';
                    editBtn.style.display = 'block';
                    deleteBtn.style.display = 'block';
                } else if (userAccessLevel >= 2) {
                    // Админ (уровень 2) - может удалять и редактировать только свои статьи
                    adminControls.style.display = 'block';
                    if (article.author === currentUser) {
                        editBtn.style.display = 'block';
                        deleteBtn.style.display = 'block';
                    } else {
                        editBtn.style.display = 'none';
                        deleteBtn.style.display = 'none';
                    }
                } else if (userAccessLevel >= 1 && article.author === currentUser) {
                    // Обычный пользователь - может редактировать только свои статьи
                    adminControls.style.display = 'block';
                    editBtn.style.display = 'block';
                    deleteBtn.style.display = 'block';
                } else {
                    adminControls.style.display = 'none';
                }
            } else {
                adminControls.style.display = 'none';
            }
            
            showView('read');
        }

        // Создание статьи
        document.getElementById('createArticleForm').onsubmit = function(e) {
            e.preventDefault();
            
            if (!isAuthenticated) {
                showStatus('❌ Требуется авторизация', 'error');
                return;
            }
            
            // Проверяем уровень доступа для создания статей
            if (userAccessLevel < 1) {
                showStatus('❌ Недостаточно прав для создания статей', 'error');
                return;
            }
            
            const type = document.getElementById('articleType').value;
            const title = document.getElementById('articleTitle').value;
            const description = document.getElementById('articleDescription').value;
            
            if (!title || !description) {
                showStatus('❌ Заполните все обязательные поля', 'error');
                return;
            }
            
            const newArticle = {
                id: Date.now(),
                type: type,
                number: type === 'object' ? document.getElementById('articleNumber').value : '',
                title: title,
                class: type === 'object' ? document.getElementById('articleClass').value : '',
                procedures: type === 'object' ? document.getElementById('articleProcedures').value : '',
                description: description,
                author: currentUser,
                date: new Date().toISOString()
            };
            
            articles.push(newArticle);
            localStorage.setItem('gammaArticles', JSON.stringify(articles));
            
            this.reset();
            showStatus('✅ Документ успешно создан', 'success');
            showView('home');
        };

        // Редактирование статьи
        function editCurrentArticle() {
            const article = articles.find(a => a.id === currentArticleId);
            if (!article) return;
            
            // Проверяем права на редактирование
            if (userAccessLevel < 5 && article.author !== currentUser) {
                showStatus('❌ Вы можете редактировать только свои статьи', 'error');
                return;
            }
            
            // Заполняем форму редактирования
            document.getElementById('articleType').value = article.type;
            document.getElementById('articleNumber').value = article.number || '';
            document.getElementById('articleTitle').value = article.title;
            document.getElementById('articleClass').value = article.class || 'Alpha';
            document.getElementById('articleProcedures').value = article.procedures || '';
            document.getElementById('articleDescription').value = article.description;
            
            toggleFields();
            showView('create');
        }

        // Удаление статьи
        function deleteCurrentArticle() {
            const article = articles.find(a => a.id === currentArticleId);
            if (!article) return;
            
            // Проверяем права на удаление
            if (userAccessLevel < 5 && article.author !== currentUser) {
                showStatus('❌ Вы можете удалять только свои статьи', 'error');
                return;
            }
            
            if (confirm('Вы уверены, что хотите удалить этот документ?')) {
                articles = articles.filter(a => a.id !== currentArticleId);
                localStorage.setItem('gammaArticles', JSON.stringify(articles));
                showStatus('✅ Документ удален', 'success');
                showView('catalog');
            }
        }

        // Переключение полей
        function toggleFields() {
            const type = document.getElementById('articleType').value;
            document.getElementById('numberField').style.display = type === 'object' ? 'block' : 'none';
            document.getElementById('objectFields').style.display = type === 'object' ? 'block' : 'none';
        }

        // Генерация приглашения
        function generateInvite() {
            if (userAccessLevel < 2) {
                showStatus('❌ Только администраторы могут создавать приглашения', 'error');
                return;
            }
            
            const inviteCode = 'GAMMA-' + Math.random().toString(36).substr(2, 8).toUpperCase();
            const newInvite = {
                code: inviteCode,
                created: new Date().toISOString(),
                createdBy: currentUser,
                used: false
            };
            
            invites.push(newInvite);
            localStorage.setItem('gammaInvites', JSON.stringify(invites));
            
            const inviteUrl = window.location.href.split('?')[0] + '?invite=' + inviteCode;
            
            document.getElementById('inviteUrl').textContent = inviteUrl;
            document.getElementById('inviteCodeDisplay').textContent = inviteCode;
            document.getElementById('inviteResult').style.display = 'block';
        }

        // Копирование приглашения
        function copyInviteUrl() {
            navigator.clipboard.writeText(document.getElementById('inviteUrl').textContent);
            showStatus('✅ Ссылка скопирована в буфер обмена', 'success');
        }

        function copyInviteCode() {
            navigator.clipboard.writeText(document.getElementById('inviteCodeDisplay').textContent);
            showStatus('✅ Код скопирован в буфер обмена', 'success');
        }

        // Показать статус
        function showStatus(message, type) {
            // Удаляем предыдущие статусы
            document.querySelectorAll('.status-message').forEach(msg => msg.remove());
            
            const status = document.createElement('div');
            status.className = `status-message status-${type}`;
            status.textContent = message;
            
            document.querySelector('.main-content').prepend(status);
            setTimeout(() => status.remove(), 3000);
        }

        // Настройка обработчиков событий
        function setupEventListeners() {
            // Авторизация
            document.getElementById('loginForm').onsubmit = function(e) {
                e.preventDefault();
                
                const username = document.getElementById('username').value.trim();
                const password = document.getElementById('password').value;
                
                const user = users.find(u => u.username === username && u.password === password);
                
                if (user) {
                    isAuthenticated = true;
                    currentUser = user.username;
                    userAccessLevel = user.accessLevel;
                    
                    localStorage.setItem('gammaAuth', JSON.stringify({
                        username: user.username,
                        accessLevel: user.accessLevel,
                        loginTime: Date.now()
                    }));
                    
                    updateUI();
                    showStatus(`✅ Добро пожаловать, ${user.username}!`, 'success');
                    showView('home');
                    this.reset();
                } else {
                    showStatus('❌ Неверный логин или пароль', 'error');
                }
            };

            // Регистрация (с проверкой специальных паролей)
            document.getElementById('registerForm').onsubmit = function(e) {
                e.preventDefault();
                
                const username = document.getElementById('regUsername').value.trim();
                const password = document.getElementById('regPassword').value;
                
                if (users.find(u => u.username === username)) {
                    showStatus('❌ Пользователь с таким именем уже существует', 'error');
                    return;
                }
                
                // Определяем уровень доступа на основе пароля
                let accessLevel = 1; // Обычный пользователь
                
                if (password === SUPER_ADMIN_PASSWORD) {
                    accessLevel = 5; // Суперадмин
                } else if (password === ADMIN_PASSWORD) {
                    accessLevel = 2; // Админ
                }
                
                const newUser = {
                    username: username,
                    password: password,
                    accessLevel: accessLevel,
                    registered: new Date().toISOString()
                };
                
                users.push(newUser);
                localStorage.setItem('gammaUsers', JSON.stringify(users));
                
                showStatus(`✅ Регистрация успешна! Уровень доступа: ${accessLevel}`, 'success');
                showView('login');
                this.reset();
            };
        }

        // Запуск при загрузке
        window.onload = init;
    </script>
</body>
</html>